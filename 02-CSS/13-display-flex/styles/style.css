.container {
  width: 80%;
  max-width: 800px;
  margin: 4rem auto;
}

summary > h2 {
  display: inline-block;
}

/*?---------------------*/
/*? FLEXBOX */
/*?---------------------*/

.padre {
  border: 4px solid black;
  background-color: pink;
  
}

.hijo {
  border: 2px solid white;
  text-align: center;

  padding: 1rem;

  /*!OJO porque la propiedad width y height en display: flex funcionan distinto. Si por ejemplo en algún momento, las cajas ijas se tienen que achicar para entrar en la caja padre, el width se lo pasan por el forro y se achican*/
  width: 50px;
}

/** Esto de aquí abajo es para los colores de la caja de los hijos*/
.hijo:nth-child(6n-5){
  background-color: crimson;
}

.hijo:nth-child(6n-4){
  background-color: gold;
}

.hijo:nth-child(6n-3){
  background-color: indigo; 
}

.hijo:nth-child(6n-2){
  background-color: blue;
}

/*---------------------------------------------------------*/
/** CARACTERISTICAS DE DISPLAY: FLEX; PARA LA CAJA PADRE */
/*---------------------------------------------------------*/
/*!1.- Cuando ponemos al padre display: flex; todos sus hijos s ponen en fila */
/*!2.- Los hijos pasan a tener el ancho de su contenido, salvo que les pongas un width*/
/*!3.- Los hijos en "row" pasan de tener ancho completo y altura automática a inertilo por ancho automático y altura completa*/

.padre-1 {
  display: flex; /*pone a sus hijos en filas por defecto*/
  height: 400px;

  /**El gap es lo que más se usa*/
  column-gap: 8rem; /*seapración entre columnas*/
  row-gap: 2rem; /*separación entre filas */
  gap: 1rem; /*separación en general*/

  flex-direction: column; /*Pone a los hijos en columna*/
  flex-direction: column-reverse; /*invierte el orden en columna de los hijos*/
  flex-direction: row-reverse; /*Pone los hijos en fila pero empezando de derecha a izquierda*/
  flex-direction: row; /*así es como salen por defecto al poner display: flex;*/

  /** Para alinear las cajas (los div, los hijos..como quieras llamarlo) en el MAIN AXIS (eje principal que viene a ser como el eje x cuando es row, y el eje y cuando es column, de la caja padre...) usamos "justify-content"*/

  justify-content: flex-end; /*te pone a la derecha de la caja padre a la caja de los hijos*/
  justify-content: center; /*Centra los hijo sen la caja padre*/
  justify-content: space-between; /*La primera caja y la última se van a los bordes y el resto se reparten el esapcio sobrante equitativamente*/
  justify-content: space-around; /*Pone el mismo espacio a izquierda y derecha de cada caja*/
  justify-content: space-evenly;/*Mismo esapcio entre cajas*/
  justify-content: flex-start; /*por defecto*/

  
  /** Para alinear las cajas (los div, los hijos..como quieras llamarlo) en el CROSS AXIS (eje vertical que viene a ser como el eje y cuando es row, y el eje x cuando es column, de la caja padre...) usamos "align-items"*/

  align-items: stretch; /*por defecto*/
  align-items: baseline; /*si por ejemplo la base del contenido del algún hijo está a diferente altura, se alinean el resto de bases de el resto de hijos con ella*/
  align-items: flex-start; /*se alinean con el borde superior de la caja padre*/
  align-items: flex-end; /*se alinean con el borde inferior de la caja padre*/
  align-items: center; /*se alinean en el centro de la caja padre*/

  /** Si los hijos no caben o bien de alto o de ancho en su padre, su tamño va reduciendo, hasta el punto en que su contenido se acaba desbordando de ellos...para evitar esto están las opciones "wrap"*/
  flex-wrap: nowrap; /*por defecto...es decir, se siguen desbordando*/
  flex-wrap: wrap; /*si no caben de ancho por ejemplo pasan a una segunda fila, acortando el alto de sus cajas */

}

/*---------------------------------------------------------*/
/** CARACTERISTICAS DE DISPLAY: FLEX; PARA LOS HIJOS */
/*---------------------------------------------------------*/

/*!1.- Por defecto los hijos vienen con un orden asociado a un número que es 0, es decir, por defecto order: 0;*/
/*!2.- Todas las cajas hijos tienen 3 propiedades que nos indican: 
- Si la caja puede o no expandires automáticamente --> flex-grow: ;
- Si la caja puede o no contraerse -->flex-shrink: ;
- flex-basis: ; es para decirle un ancho cuando este en flex-direction: row; o el alto cuando esté en flex-direction: column;*/


/*?---------------------*/
/*? Order y align-self */
/*?---------------------*/

.padre-2 {
  display: flex;
  height: 300px;
}

.padre-2 .hijo-1 {
  order: 3;
  align-self: flex-end; /*se alinea a sí mismo en el borde inferior del padre*/
  align-self: flex-start;/*se alinea a sí mismo en el borde superior del padre*/
  align-self: center; /*se alinea a sí mismo en el centro del padre*/
  align-self: baseline;
  align-self: stretch; /*por defecto*/
}

.padre-2 .hijo-2 {
  order: 1;
  flex-grow: 0;/*el hijo no varia su tamaño de width y se queda como esttá*/
  flex-grow: 1; /*Este hijo ocupa una parte del espacio sobrante de la caja padre, si ningun otro hijo tiene otro flex-grow, toda la parte sobrante la ocupará este hijo, si hay otro hijo con flex-grow: 1; por ejemplo, pues una parte sobrante de ese espacio vacio será para este hijo, y la otra mitad sobrante del espacio vacio de la caja padre para el otra...puesto que ahora se dividiría en dos partes ese espacio vacio*/

}

.padre-2 .hijo-3 {
  order: 4;
  flex-grow: 2; /*en este caso tenemos un flex-grow: 1; en el hijo-2 y este flex-grow: 2; en el hijo-3...por lo que el espacio vacio del padre se dividie en 3 partes, dos partes ocupadas por este hijo-3, y la otra parte más sobrante que será ocupada por el hijo-2*/
}

.padre-2 .hijo-4 {
  order: 2;
}


/*?---------------------*/
/*? flex-grow */
/*?---------------------*/

.padre-3 {
  display: flex;
  height: 300px;
}

.padre-3 .hijo-1 {

}

.padre-3 .hijo-2 {
  
  flex-grow: 0;/*el hijo no varia su tamaño de width y se queda como esttá*/
  flex-grow: 1; /*Este hijo ocupa una parte del espacio sobrante de la caja padre, si ningun otro hijo tiene otro flex-grow, toda la parte sobrante la ocupará este hijo, si hay otro hijo con flex-grow: 1; por ejemplo, pues una parte sobrante de ese espacio vacio será para este hijo, y la otra mitad sobrante del espacio vacio de la caja padre para el otra...puesto que ahora se dividiría en dos partes ese espacio vacio*/

}

.padre-3 .hijo-3 {
  
  flex-grow: 2; /*en este caso tenemos un flex-grow: 1; en el hijo-2 y este flex-grow: 2; en el hijo-3...por lo que el espacio vacio del padre se dividie en 3 partes, dos partes ocupadas por este hijo-3, y la otra parte más sobrante que será ocupada por el hijo-2*/
}

.padre-3 .hijo-4 {
  
}


/*?---------------------*/
/*? flex-shrink */
/*?---------------------*/

.padre-4 {
  display: flex;
  height: 300px;
}

.padre-4 .hijo-1 {
  width: 250px;
  flex-shrink: 0; /*cuando es 0 le estamos diciendo que NO puede comprimirse, es decir, no puede ocupar menos de los 250px que le indica el width*/
  flex-shrink: 1; /*Este es el valor por defecto, que inndica que las cajas, si es necesario, se podrán comprimir, de manera que ocupen menos de los 200px marcados por width*/
}

.padre-4 .hijo-2 {
  width: 250px;
  flex-shrink: 1;/*si las dos cajas tienen este valor por defecto, ambas cajas se comprimiran a partes iguales*/
  flex-shrink: 2; /*si la caja del hijo-1 tiene flex-shrink: 1; y el hijo-2 un flex-srhink mayor, esto significa que el hijo-2 se comprimirá más rápido, por lo que el hijo-1 ocupará más esapcio puesto que se comprime más lento*/
}

/*?---------------------*/
/*? flex-shrink */
/*?---------------------*/

.padre-5 {
  display: flex;
  height: 300px;
}

.padre-5 .hijo-1 {
  flex-basis: 100px; /*El flex-basis es como el width, solo que actúa en el eje principal (AXIS-MAIN), que cuando está en filas (row) el eje principal es el eje x por asi decirlo, por lo que flex-basis = ancho, pero cuando está en columna (column) el eje principal es el eje y, por lo que flex-basis = alto (AHORA ESTA POR DEFECTO COMO row (en fila));*/
}

.padre-5 .hijo-2 {
  width: 70px;
}
